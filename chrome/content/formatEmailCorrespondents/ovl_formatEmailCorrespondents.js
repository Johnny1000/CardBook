if ("undefined" == typeof(ovl_formatEmailCorrespondents)) {	var ovl_formatEmailCorrespondents = {		getCardBookDisplayNameFromEmail: function(aEmail, aDefaultDisplay) {			Components.utils.import("chrome://cardbook/content/cardbookRepository.js");			cardbookRepository.jsInclude(["chrome://cardbook/content/cardbookUtils.js"]);			var found = false;			var myResult = "";			if (aEmail != null && aEmail !== undefined && aEmail != "") {				var myTestString = aEmail.toLowerCase();				for (var i = 0; i < cardbookRepository.cardbookAccounts.length; i++) {					if (cardbookRepository.cardbookAccounts[i][1] && cardbookRepository.cardbookAccounts[i][5] && cardbookRepository.cardbookAccounts[i][6] != "SEARCH") {						var myDirPrefId = cardbookRepository.cardbookAccounts[i][4];						if (cardbookRepository.cardbookCardEmails[myDirPrefId]) {							if (cardbookRepository.cardbookCardEmails[myDirPrefId][myTestString]) {								myResult = cardbookRepository.cardbookCardEmails[myDirPrefId][myTestString][0].fn;								found = true;								break;							}						}					}				}			}			if (found) {				if (myResult != null && myResult !== undefined && myResult != "") {					return {found: found, result: myResult};				} else {					return {found: found, result: aEmail};				}			} else if (aDefaultDisplay != null && aDefaultDisplay !== undefined && aDefaultDisplay != "") {				return {found: found, result: aDefaultDisplay};			} else {				return {found: found, result: aEmail};			}		},		getOthersDisplayNameFromEmail: function(aEmail, aDefaultDisplay) {			if (aEmail != null && aEmail !== undefined && aEmail != "") {				var myTestString = aEmail.toLowerCase();				var contactManager = Components.classes["@mozilla.org/abmanager;1"].getService(Components.interfaces.nsIAbManager);				var contacts = contactManager.directories;				var found = false;				var myResult = "";				while ( contacts.hasMoreElements() ) {					var contact = contacts.getNext().QueryInterface(Components.interfaces.nsIAbDirectory);					if (contact.dirPrefId != "ldap_2.servers.history" && !found) {						var abCardsEnumerator = contact.childCards;						while (abCardsEnumerator.hasMoreElements()) {							var abCard = abCardsEnumerator.getNext();							if (abCard instanceof Components.interfaces.nsIAbCard) {								if (abCard.isMailList) {									continue;								} else {									let myEmail = abCard.primaryEmail.replace(/</g,"").replace(/>/g,"").replace(/\\/g,"").replace(/\"/g,"").toLowerCase();									if (myEmail && myEmail == myTestString) {										myResult = abCard.getProperty("DisplayName","");										found = true;										break;									}									myEmail = abCard.getProperty("SecondEmail", "").replace(/</g,"").replace(/>/g,"").replace(/\\/g,"").replace(/\"/g,"").toLowerCase();									if (myEmail && myEmail == myTestString) {										myResult = abCard.getProperty("DisplayName","");										found = true;										break;									}								}							}						}					}				}			}			if (found) {				if (myResult != null && myResult !== undefined && myResult != "") {					return {found: found, result: myResult};				} else {					return {found: found, result: aEmail};				}			} else if (aDefaultDisplay != null && aDefaultDisplay !== undefined && aDefaultDisplay != "") {				return {found: found, result: aDefaultDisplay};			} else {				return {found: found, result: aEmail};			}		},		getDisplayNameColumn: function(aEmails) {			Components.utils.import("chrome://cardbook/content/cardbookRepository.js");			Components.utils.import("resource:///modules/jsmime.jsm");			cardbookRepository.jsInclude(["chrome://cardbook/content/cardbookUtils.js"]);			var prefs = Components.classes["@mozilla.org/preferences-service;1"].getService(Components.interfaces.nsIPrefBranch);			var showCondensedAddresses = prefs.getBoolPref("mail.showCondensedAddresses");			var exclusive = prefs.getBoolPref("extensions.cardbook.exclusive");			var results = [];			var addresses = {}, names = {}, fullAddresses = {};			MailServices.headerParser.parseHeadersWithArray(aEmails, addresses, names, fullAddresses);			for (var i = 0; i < addresses.value.length; i++) {				var myCardBookResult = {};				if (showCondensedAddresses) {					myCardBookResult = ovl_formatEmailCorrespondents.getCardBookDisplayNameFromEmail(addresses.value[i], names.value[i])					results.push();					if (exclusive) {						results.push(myCardBookResult.result);					} else if (myCardBookResult.found) {						results.push(myCardBookResult.result);					} else {						var myOtherResult = {};						myOtherResult = ovl_formatEmailCorrespondents.getOthersDisplayNameFromEmail(addresses.value[i], names.value[i])						results.push(myOtherResult.result);					}				} else {					if (names.value[i] != null && names.value[i] !== undefined && names.value[i] != "") {						results.push(names.value[i]);					} else {						results.push(addresses.value[i]);					}				}			}			return results.join(", ");		}	};};function cardbookSenderHandler() {};cardbookSenderHandler.prototype = {	getCellText: function(row, col) {		//get the message's header so that we can extract the date field		if (gDBView.isContainer(row) && gDBView.viewFlags & nsMsgViewFlagsType.kGroupBySort) {			return "";		} else {			var hdr = gDBView.getMsgHdrAt(row);			return ovl_formatEmailCorrespondents.getDisplayNameColumn(hdr.getStringProperty("sender"));		}	},	getSortStringForRow: function(hdr) {return ovl_formatEmailCorrespondents.getDisplayNameColumn(hdr.getStringProperty("sender"));},	isString:            function() {return true;},	getCellProperties:   function(row, col, props){},	getRowProperties:    function(row, props){},	getImageSrc:         function(row, col) {return null;},	getSortLongForRow:   function(hdr) {return ovl_formatEmailCorrespondents.getDisplayNameColumn(hdr.getStringProperty("sender"));}};function cardbookRecipientsHandler() {};cardbookRecipientsHandler.prototype = {	getCellText: function(row, col) {		//get the message's header so that we can extract the date field		if (gDBView.isContainer(row) && gDBView.viewFlags & nsMsgViewFlagsType.kGroupBySort) {			return "";		} else {			var hdr = gDBView.getMsgHdrAt(row);			return ovl_formatEmailCorrespondents.getDisplayNameColumn(hdr.getStringProperty("recipients"));		}	},	getSortStringForRow: function(hdr) {return ovl_formatEmailCorrespondents.getDisplayNameColumn(hdr.getStringProperty("recipients"));},	isString:            function() {return true;},	getCellProperties:   function(row, col, props){},	getRowProperties:    function(row, props){},	getImageSrc:         function(row, col) {return null;},	getSortLongForRow:   function(hdr) {return ovl_formatEmailCorrespondents.getDisplayNameColumn(hdr.getStringProperty("recipients"));}};function cardbookCorrespondentHandler() {};cardbookCorrespondentHandler.prototype = {    isOutgoingMail: function(aMsgHdr) {		if (!aMsgHdr) {			return false;		}		let author = aMsgHdr.mime2DecodedAuthor;		if (author) {			let am = MailServices.accounts;			for (let identity in fixIterator(am.allIdentities, Components.interfaces.nsIMsgIdentity)) {				if (author.includes(identity.email)) {					return true;				}			}		}		return false;	},	getCellText: function(row, col) {		//get the message's header so that we can extract the date field		if (gDBView.isContainer(row) && gDBView.viewFlags & nsMsgViewFlagsType.kGroupBySort) {			return "";		} else {			var hdr = gDBView.getMsgHdrAt(row);			if (this.isOutgoingMail(hdr)) {				return ovl_formatEmailCorrespondents.getDisplayNameColumn(hdr.getStringProperty("recipients"));			} else {				return ovl_formatEmailCorrespondents.getDisplayNameColumn(hdr.getStringProperty("sender"));			}		}	},	getSortStringForRow: function(hdr) {		var hdr = gDBView.getMsgHdrAt(row);		if (this.isOutgoingMail(hdr)) {			return ovl_formatEmailCorrespondents.getDisplayNameColumn(hdr.getStringProperty("recipients"));		} else {			return ovl_formatEmailCorrespondents.getDisplayNameColumn(hdr.getStringProperty("sender"));		}	},	isString:            function() {return true;},	getCellProperties:   function(row, col, props){		var hdr = gDBView.getMsgHdrAt(row);		if (this.isOutgoingMail(hdr)) {			return "outgoing";		} else {			return "incoming";		}	},	getRowProperties:    function(row, props){},	getImageSrc:         function(row, col) {return null;},	getSortLongForRow:   function(hdr) {		var hdr = gDBView.getMsgHdrAt(row);		if (this.isOutgoingMail(hdr)) {			return ovl_formatEmailCorrespondents.getDisplayNameColumn(hdr.getStringProperty("recipients"));		} else {			return ovl_formatEmailCorrespondents.getDisplayNameColumn(hdr.getStringProperty("sender"));		}	}};ovl_formatEmailCorrespondents.createObserver = {	observe: function(aMsgFolder, aTopic, aData) {		if (gDBView) {			gDBView.addColumnHandler("senderCol", new cardbookSenderHandler());			gDBView.addColumnHandler("recipientCol", new cardbookRecipientsHandler());			gDBView.addColumnHandler("correspondentCol", new cardbookCorrespondentHandler());		}	}};ovl_formatEmailCorrespondents.addObserver = function() {	var ObserverService = Components.classes["@mozilla.org/observer-service;1"].getService(Components.interfaces.nsIObserverService);	ObserverService.addObserver(ovl_formatEmailCorrespondents.createObserver, "MsgCreateDBView", false);};// for the displayed name of emails columnswindow.addEventListener("load", ovl_formatEmailCorrespondents.addObserver, false);// for the displayed name of emails// FormatDisplayName(function() {	// Keep a reference to the original function.	var _original = FormatDisplayName;		// Override a function.	FormatDisplayName = function() {				// Execute some action afterwards.		var prefs = Components.classes["@mozilla.org/preferences-service;1"].getService(Components.interfaces.nsIPrefBranch);		var exclusive = prefs.getBoolPref("extensions.cardbook.exclusive");		if (exclusive) {			var showCondensedAddresses = prefs.getBoolPref("mail.showCondensedAddresses");			if (showCondensedAddresses) {				return ovl_formatEmailCorrespondents.getCardBookDisplayNameFromEmail(arguments[0],arguments[1]);			} else {				// Execute original function.				var rv = _original.apply(null, arguments);			}		} else {			// Execute original function.			var rv = _original.apply(null, arguments);			return ovl_formatEmailCorrespondents.getCardBookDisplayNameFromEmail(arguments[0],rv);		}				// return the original result		return rv;	};})();