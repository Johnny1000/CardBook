<?xml version="1.0" encoding="UTF-8"?>
<!-- adapted from Lightning -->
<!DOCTYPE dialog [
	<!ENTITY % cardbookCategoryPanelDTD SYSTEM "chrome://cardbook/locale/wdw_categoriesEdition.dtd"> %cardbookCategoryPanelDTD;
]>

<bindings id="cardbookCategoryPanel"
	xmlns="http://www.mozilla.org/xbl"
	xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
	xmlns:xbl="http://www.mozilla.org/xbl">

	<!-- Unfortunately, the normal menulist binding doesn't allow a panel child
	This binding replaces the usual menulist to allow a panel -->
	<binding id="cardbookPanelMenulist" extends="chrome://global/content/bindings/menulist.xml#menulist">
		<content sizetopopup="pref">
			<xul:hbox class="menulist-label-box" flex="1">
				<xul:image class="menulist-icon" xbl:inherits="src=image,src"/>
				<xul:label class="menulist-label" xbl:inherits="value=label,crop,accesskey" crop="right" flex="1"/>
			</xul:hbox>
			<xul:dropmarker class="menulist-dropmarker" type="menu" xbl:inherits="disabled,open"/>
			<children includes="menupopup|panel"/>
		</content>
	</binding>
	
	<binding id="cardbookItemPanel" extends="chrome://global/content/bindings/popup.xml#panel">
		<resources>
			<stylesheet src="chrome://cardbook/skin/cardbookCategoryPanel.css"/>
		</resources>
		<content>
			<xul:textbox anonid="addItemTextbox"
				class="addItemTextboxClass"
				type="search"
				searchbutton="true"
				placeholder="&addItemTextboxLabel;"
				oncommand="document.getBindingParent(this).addNewItem();"
				flex="1"/>
			<xul:listbox anonid="itemsListbox" class="itemsListboxClass" selType="multiple">
				<children/>
			</xul:listbox>
		</content>
		<implementation>
			<field name="prefixId"></field>
			<!-- sourceItems : [ [label0, value0], ...] -->
			<field name="sourceItems">[]</field>
			<property name="itemsCode" readonly="true">
				<getter><![CDATA[
					return this.getItems('code');
				]]></getter>
			</property>
			<property name="itemsLabel" readonly="true">
				<getter><![CDATA[
					return this.getItems('label');
				]]></getter>
			</property>
			<property name="types" readonly="true">
				<getter><![CDATA[
					return this.getTypes();
				]]></getter>
			</property>
			<property name="pg" readonly="true">
				<getter><![CDATA[
					return this.getPg();
				]]></getter>
			</property>
			<!-- only used for categories -->
			<method name="addNewItem">
				<body><![CDATA[
					let itemsListbox = document.getAnonymousElementByAttribute(this, "anonid", "itemsListbox");
					let addItemTextbox = document.getAnonymousElementByAttribute(this, "anonid", "addItemTextbox");
					let newItem = addItemTextbox.value;
					
					if (!newItem) {
						return;
					}
					
					this.sourceItems.push([newItem, newItem]);
					this.sourceItems = cardbookUtils.sortArrayByString(cardbookUtils.arrayUnique2D(this.sourceItems),0,1);
					let allItems = this.getItems('value');
					allItems.push(newItem);
					allItems = cardbookUtils.sortArrayByString(cardbookRepository.arrayUnique(allItems),-1,1);
					
					addItemTextbox.value = "";
					this.loadItems(this.prefixId, this.sourceItems, allItems, false);
				]]></body>
			</method>
			<method name="getItems">
				<!-- aValue : value|label -->
				<parameter name="aValue"/>
				<body><![CDATA[
					let itemsListbox = document.getAnonymousElementByAttribute(this, "anonid", "itemsListbox");
					let myItemList = [];
					for (var i=0; i<itemsListbox.itemCount; i++) {
						var aItem = itemsListbox.getItemAtIndex(i);
						var aItemChecked = aItem.getAttribute('checked');
						aItemChecked = typeof aItemChecked == "boolean" ? aItemChecked : (aItemChecked == 'true' ? true : false);
						if (aItemChecked) {
							myItemList.push(aItem.getAttribute(aValue).trim());
						}
					}
					return myItemList;
				]]></body>
			</method>
			<method name="getTypes">
				<body><![CDATA[
					let itemsListbox = document.getAnonymousElementByAttribute(this, "anonid", "itemsListbox");
					let myItemList = [];
					for (var i=0; i<itemsListbox.itemCount; i++) {
						var aItem = itemsListbox.getItemAtIndex(i);
						var aItemChecked = aItem.getAttribute('checked');
						aItemChecked = typeof aItemChecked == "boolean" ? aItemChecked : (aItemChecked == 'true' ? true : false);
						if (aItemChecked) {
							if (!(aItem.getAttribute('pg') != null && aItem.getAttribute('pg') !== undefined && aItem.getAttribute('pg') != "")) {
								myItemList.push(aItem.getAttribute('value').trim());
							}
						}
					}
					return myItemList;
				]]></body>
			</method>
			<method name="getPg">
				<body><![CDATA[
					let itemsListbox = document.getAnonymousElementByAttribute(this, "anonid", "itemsListbox");
					let myItemList = [];
					for (var i=0; i<itemsListbox.itemCount; i++) {
						var aItem = itemsListbox.getItemAtIndex(i);
						var aItemChecked = aItem.getAttribute('checked');
						aItemChecked = typeof aItemChecked == "boolean" ? aItemChecked : (aItemChecked == 'true' ? true : false);
						if (aItemChecked) {
							if (aItem.getAttribute('pg') != null && aItem.getAttribute('pg') !== undefined && aItem.getAttribute('pg') != "") {
								myItemList.push([aItem.getAttribute('value').trim(), aItem.getAttribute('label').trim()]);
							}
						}
					}
					return myItemList;
				]]></body>
			</method>
			<method name="loadItems">
				<parameter name="aPrefixId"/>
				<!-- aSourceList : [ [label0, value0, pg], ...] -->
				<!-- pg : name of the property group , not required -->
				<!-- pg : used only for types -->
				<parameter name="aSourceList"/>
				<!-- aCheckedSourceList : [ value0, ...] -->
				<parameter name="aCheckedSourceList"/>
				<parameter name="aAddNewItemField"/>
				<body><![CDATA[
					let addItemTextbox = document.getAnonymousElementByAttribute(this, "anonid", "addItemTextbox");
					addItemTextbox.hidden = aAddNewItemField;
					
					let itemsListbox = document.getAnonymousElementByAttribute(this, "anonid", "itemsListbox");
				
					while (itemsListbox.firstChild) {
						itemsListbox.removeChild(itemsListbox.firstChild);
					}
					
					if (aSourceList) {
						for (var i = 0; i < aSourceList.length; i++) {
							var aItem = itemsListbox.appendItem(aSourceList[i][0], aSourceList[i][1]);
							aItem.setAttribute('id', aPrefixId + aSourceList[i][1]);
							aItem.setAttribute('type', 'checkbox');
							if (aSourceList[i][2] != null && aSourceList[i][2] !== undefined && aSourceList[i][2] != "") {
								aItem.setAttribute('pg', aSourceList[i][2]);
							} else {
								aItem.setAttribute('pg', '');
							}
						}
						for (var i = 0; i < aCheckedSourceList.length; i++) {
							if (document.getElementById(aPrefixId + aCheckedSourceList[i])) {
								var aItem = document.getElementById(aPrefixId + aCheckedSourceList[i]);
								aItem.setAttribute('checked', true);
							}
						}
					}
					this.sourceItems = JSON.parse(JSON.stringify(aSourceList));
					this.prefixId = aPrefixId;
				]]></body>
			</method>
		</implementation>
	</binding>
</bindings>
